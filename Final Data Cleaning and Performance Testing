"""NFL 5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-tIxDGseO8912N1TS42aJD6WlrIleaQ7
"""
#Code using trained models and generating results
#Imports
from tensorflow.keras.wrappers.scikit_learn import KerasClassifier, KerasRegressor
from sklearn.naive_bayes import GaussianNB
from numpy import ravel
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization
from keras.regularizers import l1_l2, l1, l2
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import accuracy_score, r2_score
import keras
import tensorflow as tf
from sklearn.metrics import confusion_matrix, f1_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle
import keras.backend as K
from keras.models import load_model
import seaborn as sns
from imblearn.over_sampling import BorderlineSMOTE, SMOTE, ADASYN, SVMSMOTE, KMeansSMOTE, SMOTENC
from sklearn.utils import class_weight
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from imblearn.under_sampling import RandomUnderSampler
from sklearn.metrics import accuracy_score, mean_absolute_error
from sklearn.metrics import confusion_matrix, f1_score
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVR, SVC
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from sklearn import datasets, ensemble
import joblib

#Defining functions
def keyGenerator(a,b):
    return (2**a)*(3**b)

#import data
df = pd.read_csv('tracking.csv')
df1 = pd.read_csv('plays.csv')
df2 = pd.read_csv('players.csv')

df = df.merge(df2[['nflId','officialPosition']], how='inner',on='nflId')

#Coding for positions
df['o_line']=0
df.loc[(df['officialPosition'] == 'C') |
       (df['officialPosition'] == 'T') |
       (df['officialPosition'] == 'G'), 'o_line'] = 1

df['d_line']=0
df.loc[(df['officialPosition'] == 'DE') |
       (df['officialPosition'] == 'DT') |
       (df['officialPosition'] == 'NT'), 'd_line'] = 1

df['linebacker'] = 0
df.loc[(df['officialPosition'] == 'OLB') |
       (df['officialPosition'] == 'MLB') |
       (df['officialPosition'] == 'ILB'), 'linebacker'] = 1

#Data cleaning
df['gameId'] = (df['gameId']).astype(float)
df['playId2'] = df['playId'] / (df['playId']+.1)
df['gameId2'] = df['gameId'] / (df['gameId']+10000000000)
df['unique_playId'] = keyGenerator(df['playId2'],df['gameId2'])
df1['playId2'] = df1['playId'] / (df1['playId']+.1)
df1['gameId2'] = df1['gameId'] / (df1['gameId']+10000000000)

#Generating unique play ID
df1['unique_playId'] = keyGenerator(df1['playId2'],df1['gameId2'])
df = df.merge(df1[['unique_playId','possessionTeam']], how='inner',on='unique_playId')

df['offense'] = 0
df.loc[df['team'] == df['possessionTeam'], 'offense'] = 1

df['time'] = pd.to_datetime(df['time'])
df['time2'] = df['time'].dt.strftime('%Y-%m-%d %H:%M:%S')
df['time2'] = pd.to_datetime(df['time2'])

#Generating features
df.loc[(df['event'] == 'ball_snap') | (df['event'] == 'autoevent_ballsnap'), 'time_of_snap'] = df['time2']

df.loc[(df['event'] == 'pass_forward') | (df['event'] == 'autoevent_passforward'), 'time_of_event'] = df['time2']
df.loc[(df['event'] == 'qb_sack') | (df['event'] == 'qb_strip_sack'), 'time_of_event'] = df['time2']

for i in df['unique_playId'].unique():
  df.loc[df['unique_playId'] == i, 'time_of_pass'] =  df.loc[df['unique_playId'] == i]['time_of_event'].max()

for i in df['unique_playId'].unique():
  df.loc[df['unique_playId'] == i, 'time_of_snap'] =  df.loc[df['unique_playId'] == i]['time_of_snap'].max()

df = df.loc[(df['time2'] <= df['time_of_pass']) & (df['time2'] >= df['time_of_snap'])]

df['time3'] = df['time2'].astype(int)
df['time3'] = df['time3'] / (df['time3'] + 1000000000000000)
df['unique_gameTime'] = keyGenerator(df['gameId2'], df['time3'])

df.drop_duplicates(subset=['unique_gameTime','nflId'],inplace=True)

df['defensive_lineman_assignee'] = np.nan

#assigns defensive players to offensive linemen
for i in df['unique_playId'].unique():
  for j in df.loc[(df['unique_playId'] == i) & (df['d_line'] == 1)]['nflId'].unique():

    dx = (df.loc[(df['unique_playId'] == i) & (df['d_line'] == 1) & (df['nflId'] == j) & (df['time2'] == df['time_of_snap'])]['x']).mean()
    dy = (df.loc[(df['unique_playId'] == i) & (df['d_line'] == 1) & (df['nflId'] == j) & (df['time2'] == df['time_of_snap'])]['y']).mean()

    ox = df.loc[(df['unique_playId'] == i) & (df['o_line'] == 1) & (df['time2'] == df['time_of_snap'])][['nflId','x']]


    ox['x_dist'] = np.array(dx) - np.array(df.loc[(df['unique_playId'] == i) & (df['o_line'] == 1) & (df['time2'] == df['time_of_snap'])]['x'])
    ox['y_dist'] = np.array(dy) - np.array(df.loc[(df['unique_playId'] == i) & (df['o_line'] == 1) & (df['time2'] == df['time_of_snap'])]['y'])
    ox['dist'] = np.sqrt((ox['x_dist']**2) + (ox['y_dist']**2))

    assignee = ox.loc[ox['dist'] == ox['dist'].min()]['nflId']

    df.loc[(df['d_line'] == 1) & (df['unique_playId'] == i) &
           (df['nflId'] == j), 'defensive_lineman_assignee'] = assignee.mean()

#assigns defensive players to offensive linemen
for i in df['unique_playId'].unique():
  for j in df.loc[(df['unique_playId'] == i) & (df['linebacker'] == 1)]['nflId'].unique():
    for h in df.loc[(df['unique_playId'] == i) & (df['nflId'] == j)]['time2'].unique():

      dx = (df.loc[(df['unique_playId'] == i) & (df['nflId'] == j) & (df['time2'] == h)]['x']).mean()
      dy = (df.loc[(df['unique_playId'] == i) & (df['nflId'] == j) & (df['time2'] == h)]['y']).mean()

      ox = df.loc[(df['unique_playId'] == i) & (df['o_line'] == 1) & (df['time2'] == h)][['nflId','x']]

      ox['x_dist'] = np.array(dx) - np.array(df.loc[(df['unique_playId'] == i) & (df['o_line'] == 1) & (df['time2'] == h)]['x'])
      ox['y_dist'] = np.array(dy) - np.array(df.loc[(df['unique_playId'] == i) & (df['o_line'] == 1) & (df['time2'] == h)]['y'])
      ox['dist'] = np.sqrt((ox['x_dist']**2) + (ox['y_dist']**2))

      assignee = ox.loc[ox['dist'] == ox['dist'].min()]['nflId']

      df.loc[(df['unique_playId'] == i) &
           (df['nflId'] == j) &
           (df['time2'] == h), 'linebacker_assignee'] = assignee.mean()

df2.loc[df2['nflId'] == 42377]

df['distance_from_qb'] = float(0)
qb_l = df.loc[df['officialPosition']=='QB'][['time2','gameId2','unique_playId','x','y']]
qb_l.rename(columns={'x':'qb_x', 'y':'qb_y'},inplace=True)
qb_l['time3'] = qb_l['time2'].astype(int)
qb_l['time3'] = qb_l['time3'] / (qb_l['time3'] + 1000000000000000)
qb_l['unique_gameTime'] = keyGenerator(qb_l['gameId2'], qb_l['time3'])

df['time3'] = df['time2'].astype(int)
df['time3'] = df['time3'] / (df['time3'] + 1000000000000000)
df['unique_gameTime'] = keyGenerator(df['gameId2'], df['time3'])

df = df.merge(qb_l, on=['unique_gameTime'], how='inner').drop_duplicates(subset=['unique_gameTime','nflId'])

df['distance_from_qb'] = np.sqrt(abs(df['x'] - df['qb_x'])**2 + abs(df['y'] - df['qb_y'])**2)

df.drop(columns=['time2_y',
       'gameId2_y','time3_y','unique_playId_y'],inplace=True)
df.rename(columns={'gameId2_x':'gameId2', 'unique_playId_x':'unique_playId','time2_x':'time2',
                   'time3_x':'time3'},inplace=True)

"""Next step is to get the variables I need for my model for each second of the play. There will be redundencies for each second of the same play which is ok."""

df1['success'] = 0
df1.loc[(df1['down']==1) & (df1['playResult'] >= 4), 'success'] = 1
df1.loc[(df1['down']==2) & (df1['playResult'] >= (.6 * df1['yardsToGo'])), 'success'] = 1
df1.loc[(df1['down']>=3) & (df1['playResult'] >= (df1['yardsToGo'])), 'success'] = 1

df1 = pd.concat([df1,pd.get_dummies(df1['offenseFormation'])],axis=1)

df1.loc[df1['offenseFormation'] == 'SHOTGUN', 'oFormation'] = 1
df1.loc[df1['offenseFormation'] == 'EMPTY', 'oFormation'] = 2
df1.loc[df1['offenseFormation'] == 'SINGLEBACK', 'oFormation'] = 3
df1.loc[df1['offenseFormation'] == 'I_FORM', 'oFormation'] = 4
df1.loc[df1['offenseFormation'] == 'JUMBO', 'oFormation'] = 5
df1.loc[df1['offenseFormation'] == 'PISTOL', 'oFormation'] = 6
df1.loc[df1['offenseFormation'] == 'WILDCAT', 'oFormation'] = 7

df = df.merge(df1[['success','unique_playId','down','yardsToGo', 'EMPTY', 'I_FORM', 'JUMBO', 'PISTOL',
       'SHOTGUN', 'SINGLEBACK', 'WILDCAT','oFormation']], on='unique_playId')

df['seconds_since_snap'] = df['time2'] - df['time_of_snap']
df = df[df['seconds_since_snap'].astype(int) > 0]
df['seconds_since_snap'] = df['seconds_since_snap'].astype(int)

df['seconds_since_snap'] = df['seconds_since_snap']/1000000000

z = df.loc[((df['officialPosition'] ==
                                  'LB') |
                                  (df['officialPosition'] ==
                                  'DE') |
                                  (df['officialPosition'] ==
                                  'DT') |
                                  (df['officialPosition'] ==
                                  'ILB') |
                                  (df['officialPosition'] ==
                                   'OLB') |
                                  (df['officialPosition']== 'MLB')) ].groupby(['unique_gameTime'])['distance_from_qb','x','y'].mean()
z1 = df.loc[((df['officialPosition'] ==
                                  'LB') |
                                  (df['officialPosition'] ==
                                  'DE') |
                                  (df['officialPosition'] ==
                                  'DT') |
                                  (df['officialPosition'] ==
                                  'ILB') |
                                  (df['officialPosition'] ==
                                   'OLB') |
                                  (df['officialPosition']== 'MLB')) ].groupby(['unique_gameTime'])['distance_from_qb','x','y'].std()
z1 = z1.reset_index().merge(df[['unique_gameTime','success','down','playDirection','qb_x','qb_y','yardsToGo','seconds_since_snap',
                                 'oFormation']], on='unique_gameTime',how='inner').drop_duplicates(subset=
                                                                                                                      'unique_gameTime')
z = z.reset_index().merge(df[['unique_gameTime','success','down']], on='unique_gameTime',how='inner').drop_duplicates(subset=
                                                                                                                      'unique_gameTime')
z1.loc[z1['playDirection'] == 'right', 'playDirection'] = 1
z1.loc[z1['playDirection'] == 'left', 'playDirection'] = 0
z.rename(columns={'distance_from_qb':'dist_def','x':'avg_def_x','y':'avg_def_y'},inplace=True)
z1.rename(columns={'distance_from_qb':'std_def','x':'std_def_x','y':'std_def_y'},inplace=True)
z = z.merge(z1[['unique_gameTime', 'std_def', 'std_def_x', 'std_def_y','playDirection', 'qb_x', 'qb_y','yardsToGo','seconds_since_snap',
                'oFormation']], on='unique_gameTime')
x = df.loc[((df['officialPosition'] ==
                                  'TE'))].groupby(['unique_gameTime'])['distance_from_qb','x','y'].mean()
x1 = df.loc[((df['officialPosition'] ==
                                  'TE'))].groupby(['unique_gameTime'])['distance_from_qb','x','y'].std()
x = x.reset_index()
x.rename(columns={'distance_from_qb':'dist_te','x':'avg_te_x','y':'avg_te_y'},inplace=True)
x1 = x1.reset_index()
x1.rename(columns={'distance_from_qb':'std_te','x':'std_te_x','y':'std_te_y'},inplace=True)
x1.replace({np.nan:0},inplace=True)

x = x.merge(x1[['std_te','unique_gameTime','std_te_y','std_te_x']],on='unique_gameTime')
y = df.loc[((df['officialPosition'] ==
                                  'WR'))].groupby(['unique_gameTime'])['distance_from_qb','x','y'].mean()
y1 = df.loc[((df['officialPosition'] ==
                                  'WR'))].groupby(['unique_gameTime'])['distance_from_qb','x','y'].std()
y = y.reset_index()
y.rename(columns={'distance_from_qb':'dist_WR','x':'avg_WR_x','y':'avg_WR_y'},inplace=True)
y1 = y1.reset_index()
y1.rename(columns={'distance_from_qb':'std_WR','x':'std_WR_x','y':'std_WR_y'},inplace=True)
y1.replace({np.nan:0},inplace=True)

y = y.merge(y1[['std_WR','unique_gameTime','std_WR_x','std_WR_y']],on='unique_gameTime')
z = z.merge(x, on=['unique_gameTime'])
z = z.merge(y, on='unique_gameTime',how='inner')

df = df.merge(z, on='unique_gameTime')

df = df[['gameId', 'playId', 'nflId', 'frameId', 'time', 'jerseyNumber', 'team',
       'playDirection_x', 'x', 'y', 's', 'a', 'dis', 'o', 'dir', 'event',
       'officialPosition', 'o_line', 'd_line', 'linebacker', 'playId2',
       'gameId2', 'unique_playId', 'possessionTeam', 'offense', 'time2',
       'time_of_snap', 'time_of_event', 'time_of_pass',
       'defensive_lineman_assignee', 'linebacker_assignee', 'distance_from_qb',
       'time3', 'unique_gameTime', 'qb_x_x', 'qb_y_x', 'success_x', 'down_x',
       'yardsToGo_x', 'oFormation_x', 'seconds_since_snap_x',
       'dist_def','std_def','dist_te','std_te', 'dist_WR','std_WR']]

df.rename(columns={'playDirection_x':'playDirection','qb_x_x':'qb_x','qb_y_x':'qb_y',
                   'success_x':'success','down_x':'down','yardsToGo_x':'yardsToGo','oFormation_x':'oFormation',
                   'seconds_since_snap_x':'seconds_since_snap'},inplace=True)

rfc = joblib.load("rfc.joblib")
rfc2 = joblib.load("rfc2.joblib")

df['success_probability'] = .5#rfc.predict(df[['dist_def','std_def','dist_WR','dist_te','seconds_since_snap']])

df['QB Safe Zone'] = rfc2.predict(df[['dist_WR', 'dist_te', 'seconds_since_snap', 'success_probability']])

df.loc[df['d_line']==1, 'd_line_metric'] = df['distance_from_qb'] - df['QB Safe Zone']
df.loc[df['linebacker']==1, 'linebacker_metric'] = df['distance_from_qb'] - df['QB Safe Zone']

df = df.merge(df2[['nflId','displayName']],on='nflId')

df.to_excel('NFL Tracking with QB Safe Zone.xlsx')

"""MEASURING PERFORMANCE"""

df = pd.read_excel('NFL Tracking with QB Safe Zone.xlsx')

df2 = pd.read_csv('players.csv')

final = []

final = []
for i in df.loc[df['d_line'] == 1]['defensive_lineman_assignee'].unique():
  x = df.loc[df['defensive_lineman_assignee']==i]['d_line_metric'].mean()
  y = str((df2.loc[df2['nflId'] == i]['displayName']).values)
  z = np.array([i,y,x])
  final.append(z)
final = pd.DataFrame(final)
final.rename(columns={0:'nflId',1:'Name',2:'Week 1 DL'}, inplace=True)
final['Week 1 DL'] = final['Week 1 DL'].astype(float)

final1 = []
for i in df.loc[df['linebacker'] == 1]['linebacker_assignee'].unique():
  x = df.loc[df['linebacker_assignee']==i]['linebacker_metric'].mean()
  y = str((df2.loc[df2['nflId'] == i]['displayName']).values)
  z = np.array([i,y,x])
  final1.append(z)
final1 = pd.DataFrame(final1)
final1.rename(columns={0:'nflId',1:'Name',2:'Week 1 LB'}, inplace=True)
final1['Week 1 LB'] = final1['Week 1 LB'].astype(float)

final = final.merge(final1[['nflId','Week 1 LB']],on='nflId')

final['nflId'] = final['nflId'].astype(float)
final['nflId'] = final['nflId'].astype(int)

final = final.merge(df[['nflId','team','officialPosition']],on='nflId',how='inner').drop_duplicates(subset=['nflId'])

final['officialPosition'].unique()

finalT = final.loc[final['officialPosition'] == 'T']
finalC = final.loc[final['officialPosition'] == 'C']
finalG = final.loc[final['officialPosition'] == 'G']

finalC['Week 1 DL percentile'] = finalC['Week 1 DL'].rank(pct=True)
finalC['Week 1 LB percentile'] = finalC['Week 1 LB'].rank(pct=True)

finalT['Week 1 DL percentile'] = finalT['Week 1 DL'].rank(pct=True)
finalT['Week 1 LB percentile'] = finalT['Week 1 LB'].rank(pct=True)

finalG['Week 1 DL percentile'] = finalG['Week 1 DL'].rank(pct=True)
finalG['Week 1 LB percentile'] = finalG['Week 1 LB'].rank(pct=True)

finalC['Overall Percentile'] = (finalC['Week 1 DL percentile'] + finalC['Week 1 LB percentile'])/2
finalG['Overall Percentile'] = (finalG['Week 1 DL percentile'] + finalG['Week 1 LB percentile'])/2
finalT['Overall Percentile'] = (finalT['Week 1 DL percentile'] + finalT['Week 1 LB percentile'])/2

finalC['Name']=finalC['Name'].str.replace('\[|\]''','')

finalG.sort_values(by=['Overall Percentile'],ascending=False)

final.groupby(['team'])['Overall Percentile'].mean().sort_values(ascending=False).to_frame().reset_index()

final[['Name','Overall Percentile','team']].sort_values(by='Overall Percentile', ascending=False)
